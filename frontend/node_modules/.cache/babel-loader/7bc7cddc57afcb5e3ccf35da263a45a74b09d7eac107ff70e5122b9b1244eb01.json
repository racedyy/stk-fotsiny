{"ast":null,"code":"import axios from 'axios';\nimport API_BASE_URL from './api.config';\nconst API_URL = `${API_BASE_URL}/activites`;\n\n// Récupérer toutes les activités\nconst getAllActivites = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer une activité par ID\nconst getActiviteById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Créer une nouvelle activité\nconst createActivite = async activiteData => {\n  try {\n    const response = await axios.post(API_URL, activiteData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Mettre à jour une activité\nconst updateActivite = async (id, activiteData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, activiteData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Supprimer une activité\nconst deleteActivite = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les participants d'une activité\nconst getParticipants = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/participants`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les paiements d'une activité\nconst getPaiements = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/paiements`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les informations de paiement pour toutes les activités\nconst getAllActivitesWithPayments = async () => {\n  try {\n    // Récupérer toutes les activités\n    const activites = await getAllActivites();\n\n    // Pour chaque activité, récupérer les paiements et les participants\n    const activitesWithPayments = await Promise.all(activites.map(async activite => {\n      try {\n        // Récupérer les paiements\n        const paiements = await getPaiements(activite.id);\n        const totalPaye = paiements.reduce((total, paiement) => total + parseFloat(paiement.montant), 0);\n        const resteAPayer = Math.max(0, activite.cotisation - totalPaye);\n\n        // Récupérer les participants\n        const participants = await getParticipants(activite.id);\n\n        // Compter le nombre de membres et de non-membres\n        const nbMembres = participants.filter(p => p.est_membre).length;\n\n        // Compter le nombre de personnes non-membres amenées par des membres\n        const nbNonMembres = participants.filter(p => !p.est_membre).length;\n\n        // Récupérer le nombre de personnes amenées par les membres à partir des paiements\n        const nbPersonnesAmenees = paiements.reduce((total, paiement) => {\n          // Si le paiement a un champ nbPersonnes, l'ajouter au total\n          return total + (paiement.nb_personnes_amenees || 0);\n        }, 0);\n        return {\n          ...activite,\n          totalPaye,\n          resteAPayer,\n          nbMembres,\n          nbNonMembres,\n          nbTotalParticipants: nbMembres + nbNonMembres\n        };\n      } catch (error) {\n        // En cas d'erreur, retourner l'activité sans informations de paiement\n        return {\n          ...activite,\n          totalPaye: 0,\n          resteAPayer: activite.cotisation,\n          nbMembres: 0,\n          nbNonMembres: 0,\n          nbTotalParticipants: 0\n        };\n      }\n    }));\n    return activitesWithPayments;\n  } catch (error) {\n    throw error;\n  }\n};\nconst activiteService = {\n  getAllActivites,\n  getAllActivitesWithPayments,\n  getActiviteById,\n  createActivite,\n  updateActivite,\n  deleteActivite,\n  getParticipants,\n  getPaiements\n};\nexport default activiteService;","map":{"version":3,"names":["axios","API_BASE_URL","API_URL","getAllActivites","response","get","data","error","getActiviteById","id","createActivite","activiteData","post","updateActivite","put","deleteActivite","delete","getParticipants","getPaiements","getAllActivitesWithPayments","activites","activitesWithPayments","Promise","all","map","activite","paiements","totalPaye","reduce","total","paiement","parseFloat","montant","resteAPayer","Math","max","cotisation","participants","nbMembres","filter","p","est_membre","length","nbNonMembres","nbPersonnesAmenees","nb_personnes_amenees","nbTotalParticipants","activiteService"],"sources":["D:/itucedric/L3/S6/rattrap S4/prog/ex_react/stkkk/frontend/src/services/activite.service.js"],"sourcesContent":["import axios from 'axios';\nimport API_BASE_URL from './api.config';\n\nconst API_URL = `${API_BASE_URL}/activites`;\n\n// Récupérer toutes les activités\nconst getAllActivites = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer une activité par ID\nconst getActiviteById = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Créer une nouvelle activité\nconst createActivite = async (activiteData) => {\n  try {\n    const response = await axios.post(API_URL, activiteData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Mettre à jour une activité\nconst updateActivite = async (id, activiteData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, activiteData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Supprimer une activité\nconst deleteActivite = async (id) => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les participants d'une activité\nconst getParticipants = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/participants`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les paiements d'une activité\nconst getPaiements = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/paiements`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les informations de paiement pour toutes les activités\nconst getAllActivitesWithPayments = async () => {\n  try {\n    // Récupérer toutes les activités\n    const activites = await getAllActivites();\n    \n    // Pour chaque activité, récupérer les paiements et les participants\n    const activitesWithPayments = await Promise.all(activites.map(async (activite) => {\n      try {\n        // Récupérer les paiements\n        const paiements = await getPaiements(activite.id);\n        const totalPaye = paiements.reduce((total, paiement) => total + parseFloat(paiement.montant), 0);\n        const resteAPayer = Math.max(0, activite.cotisation - totalPaye);\n        \n        // Récupérer les participants\n        const participants = await getParticipants(activite.id);\n        \n        // Compter le nombre de membres et de non-membres\n        const nbMembres = participants.filter(p => p.est_membre).length;\n        \n        // Compter le nombre de personnes non-membres amenées par des membres\n        const nbNonMembres = participants.filter(p => !p.est_membre).length;\n        \n        // Récupérer le nombre de personnes amenées par les membres à partir des paiements\n        const nbPersonnesAmenees = paiements.reduce((total, paiement) => {\n          // Si le paiement a un champ nbPersonnes, l'ajouter au total\n          return total + (paiement.nb_personnes_amenees || 0);\n        }, 0);\n        \n        return {\n          ...activite,\n          totalPaye,\n          resteAPayer,\n          nbMembres,\n          nbNonMembres,\n          nbTotalParticipants: nbMembres + nbNonMembres\n        };\n      } catch (error) {\n        // En cas d'erreur, retourner l'activité sans informations de paiement\n        return {\n          ...activite,\n          totalPaye: 0,\n          resteAPayer: activite.cotisation,\n          nbMembres: 0,\n          nbNonMembres: 0,\n          nbTotalParticipants: 0\n        };\n      }\n    }));\n    \n    return activitesWithPayments;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst activiteService = {\n  getAllActivites,\n  getAllActivitesWithPayments,\n  getActiviteById,\n  createActivite,\n  updateActivite,\n  deleteActivite,\n  getParticipants,\n  getPaiements\n};\n\nexport default activiteService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}