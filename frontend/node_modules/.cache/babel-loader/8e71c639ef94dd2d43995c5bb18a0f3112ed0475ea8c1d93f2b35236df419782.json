{"ast":null,"code":"import axios from 'axios';\nimport API_BASE_URL from './api.config';\nimport remiseService from './remise.service';\nconst API_URL = `${API_BASE_URL}/activites`;\n\n// Récupérer toutes les activités\nconst getAllActivites = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer une activité par ID\nconst getActiviteById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Créer une nouvelle activité\nconst createActivite = async activiteData => {\n  try {\n    const response = await axios.post(API_URL, activiteData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Mettre à jour une activité\nconst updateActivite = async (id, activiteData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, activiteData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Supprimer une activité\nconst deleteActivite = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les participants d'une activité\nconst getParticipants = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/participants`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les paiements d'une activité\nconst getPaiements = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/paiements`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les informations de paiement pour toutes les activités\nconst getAllActivitesWithPayments = async () => {\n  try {\n    // Récupérer toutes les activités\n    const activites = await getAllActivites();\n\n    // Récupérer toutes les remises disponibles\n    const remises = await remiseService.getAllRemises();\n\n    // Pour chaque activité, récupérer les paiements et les participants\n    const activitesWithPayments = await Promise.all(activites.map(async activite => {\n      try {\n        // Récupérer les paiements\n        const paiements = await getPaiements(activite.id);\n        const totalPaye = paiements.reduce((total, paiement) => total + parseFloat(paiement.montant), 0);\n\n        // Récupérer les participants\n        const participants = await getParticipants(activite.id);\n\n        // Compter le nombre de membres et de non-membres\n        const nbMembres = participants.filter(p => p.est_membre).length;\n        const nbNonMembres = participants.filter(p => !p.est_membre).length;\n        const nbTotalParticipants = nbMembres + nbNonMembres;\n\n        // Calculer la remise applicable (sans compter le membre)\n        const nbPersonnesPourRemise = nbTotalParticipants - 1;\n        let remiseApplicable = null;\n        let pourcentageRemise = 0;\n        if (remises.length > 0 && nbPersonnesPourRemise > 0) {\n          // Trouver la remise applicable avec le plus grand nombre de personnes éligible\n          remiseApplicable = remises.filter(remise => remise.nb_personnes <= nbPersonnesPourRemise).sort((a, b) => b.nb_personnes - a.nb_personnes)[0] || null;\n          if (remiseApplicable) {\n            pourcentageRemise = remiseApplicable.pourcentage;\n          }\n        }\n\n        // Calculer le montant après remise\n        const montantRemise = activite.cotisation * (pourcentageRemise / 100);\n        const montantApresRemise = activite.cotisation - montantRemise;\n\n        // Calculer le reste à payer en tenant compte de la remise\n        const resteAPayer = Math.max(0, montantApresRemise - totalPaye);\n        return {\n          ...activite,\n          totalPaye,\n          resteAPayer,\n          nbMembres,\n          nbNonMembres,\n          nbTotalParticipants,\n          nbPersonnesPourRemise,\n          pourcentageRemise,\n          remiseApplicable,\n          montantRemise: montantRemise || 0,\n          montantApresRemise: montantApresRemise || activite.cotisation\n        };\n      } catch (error) {\n        // En cas d'erreur, retourner l'activité sans informations de paiement\n        return {\n          ...activite,\n          totalPaye: 0,\n          resteAPayer: activite.cotisation,\n          nbMembres: 0,\n          nbNonMembres: 0,\n          nbTotalParticipants: 0,\n          nbPersonnesPourRemise: 0,\n          pourcentageRemise: 0,\n          remiseApplicable: null,\n          montantRemise: 0,\n          montantApresRemise: activite.cotisation\n        };\n      }\n    }));\n    return activitesWithPayments;\n  } catch (error) {\n    throw error;\n  }\n};\nconst activiteService = {\n  getAllActivites,\n  getAllActivitesWithPayments,\n  getActiviteById,\n  createActivite,\n  updateActivite,\n  deleteActivite,\n  getParticipants,\n  getPaiements\n};\nexport default activiteService;","map":{"version":3,"names":["axios","API_BASE_URL","remiseService","API_URL","getAllActivites","response","get","data","error","getActiviteById","id","createActivite","activiteData","post","updateActivite","put","deleteActivite","delete","getParticipants","getPaiements","getAllActivitesWithPayments","activites","remises","getAllRemises","activitesWithPayments","Promise","all","map","activite","paiements","totalPaye","reduce","total","paiement","parseFloat","montant","participants","nbMembres","filter","p","est_membre","length","nbNonMembres","nbTotalParticipants","nbPersonnesPourRemise","remiseApplicable","pourcentageRemise","remise","nb_personnes","sort","a","b","pourcentage","montantRemise","cotisation","montantApresRemise","resteAPayer","Math","max","activiteService"],"sources":["D:/itucedric/L3/S6/rattrap S4/prog/ex_react/stkkk/frontend/src/services/activite.service.js"],"sourcesContent":["import axios from 'axios';\nimport API_BASE_URL from './api.config';\nimport remiseService from './remise.service';\n\nconst API_URL = `${API_BASE_URL}/activites`;\n\n// Récupérer toutes les activités\nconst getAllActivites = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer une activité par ID\nconst getActiviteById = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Créer une nouvelle activité\nconst createActivite = async (activiteData) => {\n  try {\n    const response = await axios.post(API_URL, activiteData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Mettre à jour une activité\nconst updateActivite = async (id, activiteData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, activiteData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Supprimer une activité\nconst deleteActivite = async (id) => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les participants d'une activité\nconst getParticipants = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/participants`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les paiements d'une activité\nconst getPaiements = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/paiements`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les informations de paiement pour toutes les activités\nconst getAllActivitesWithPayments = async () => {\n  try {\n    // Récupérer toutes les activités\n    const activites = await getAllActivites();\n    \n    // Récupérer toutes les remises disponibles\n    const remises = await remiseService.getAllRemises();\n    \n    // Pour chaque activité, récupérer les paiements et les participants\n    const activitesWithPayments = await Promise.all(activites.map(async (activite) => {\n      try {\n        // Récupérer les paiements\n        const paiements = await getPaiements(activite.id);\n        const totalPaye = paiements.reduce((total, paiement) => total + parseFloat(paiement.montant), 0);\n        \n        // Récupérer les participants\n        const participants = await getParticipants(activite.id);\n        \n        // Compter le nombre de membres et de non-membres\n        const nbMembres = participants.filter(p => p.est_membre).length;\n        const nbNonMembres = participants.filter(p => !p.est_membre).length;\n        const nbTotalParticipants = nbMembres + nbNonMembres;\n        \n        // Calculer la remise applicable (sans compter le membre)\n        const nbPersonnesPourRemise = nbTotalParticipants - 1;\n        let remiseApplicable = null;\n        let pourcentageRemise = 0;\n        \n        if (remises.length > 0 && nbPersonnesPourRemise > 0) {\n          // Trouver la remise applicable avec le plus grand nombre de personnes éligible\n          remiseApplicable = remises\n            .filter(remise => remise.nb_personnes <= nbPersonnesPourRemise)\n            .sort((a, b) => b.nb_personnes - a.nb_personnes)[0] || null;\n            \n          if (remiseApplicable) {\n            pourcentageRemise = remiseApplicable.pourcentage;\n          }\n        }\n        \n        // Calculer le montant après remise\n        const montantRemise = activite.cotisation * (pourcentageRemise / 100);\n        const montantApresRemise = activite.cotisation - montantRemise;\n        \n        // Calculer le reste à payer en tenant compte de la remise\n        const resteAPayer = Math.max(0, montantApresRemise - totalPaye);\n        \n        return {\n          ...activite,\n          totalPaye,\n          resteAPayer,\n          nbMembres,\n          nbNonMembres,\n          nbTotalParticipants,\n          nbPersonnesPourRemise,\n          pourcentageRemise,\n          remiseApplicable,\n          montantRemise: montantRemise || 0,\n          montantApresRemise: montantApresRemise || activite.cotisation\n        };\n      } catch (error) {\n        // En cas d'erreur, retourner l'activité sans informations de paiement\n        return {\n          ...activite,\n          totalPaye: 0,\n          resteAPayer: activite.cotisation,\n          nbMembres: 0,\n          nbNonMembres: 0,\n          nbTotalParticipants: 0,\n          nbPersonnesPourRemise: 0,\n          pourcentageRemise: 0,\n          remiseApplicable: null,\n          montantRemise: 0,\n          montantApresRemise: activite.cotisation\n        };\n      }\n    }));\n    \n    return activitesWithPayments;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst activiteService = {\n  getAllActivites,\n  getAllActivitesWithPayments,\n  getActiviteById,\n  createActivite,\n  updateActivite,\n  deleteActivite,\n  getParticipants,\n  getPaiements\n};\n\nexport default activiteService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}