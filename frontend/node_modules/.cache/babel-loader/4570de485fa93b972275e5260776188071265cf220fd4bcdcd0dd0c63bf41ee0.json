{"ast":null,"code":"import axios from 'axios';\nimport API_BASE_URL from './api.config';\nconst API_URL = `${API_BASE_URL}/membres`;\n\n// Récupérer tous les membres\nconst getAllMembres = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer un membre par ID\nconst getMembreById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Créer un nouveau membre (à partir d'une personne existante)\nconst createMembre = async membreData => {\n  try {\n    const response = await axios.post(API_URL, membreData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Mettre à jour un membre\nconst updateMembre = async (id, membreData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, membreData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Supprimer un membre\nconst deleteMembre = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les statistiques d'un membre (activités, présences, paiements)\nconst getMembreStats = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/stats`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer tous les membres avec leurs statistiques\nconst getAllMembresWithStats = async () => {\n  try {\n    // Récupérer tous les membres\n    const membres = await getAllMembres();\n\n    // Pour chaque membre, récupérer ses statistiques\n    const membresWithStats = await Promise.all(membres.map(async membre => {\n      try {\n        // Récupérer les statistiques du membre\n        const stats = await getMembreStats(membre.id);\n        return {\n          ...membre,\n          nbActivites: stats.nbActivites || 0,\n          nbPresences: stats.nbPresences || 0,\n          montantAPayer: stats.montantAPayer || 0,\n          montantPaye: stats.montantPaye || 0\n        };\n      } catch (error) {\n        // En cas d'erreur, retourner le membre sans statistiques\n        return {\n          ...membre,\n          nbActivites: 0,\n          nbPresences: 0,\n          montantAPayer: 0,\n          montantPaye: 0\n        };\n      }\n    }));\n    return membresWithStats;\n  } catch (error) {\n    throw error;\n  }\n};\nconst membreService = {\n  getAllMembres,\n  getAllMembresWithStats,\n  getMembreById,\n  getMembreStats,\n  createMembre,\n  updateMembre,\n  deleteMembre\n};\nexport default membreService;","map":{"version":3,"names":["axios","API_BASE_URL","API_URL","getAllMembres","response","get","data","error","getMembreById","id","createMembre","membreData","post","updateMembre","put","deleteMembre","delete","getMembreStats","getAllMembresWithStats","membres","membresWithStats","Promise","all","map","membre","stats","nbActivites","nbPresences","montantAPayer","montantPaye","membreService"],"sources":["D:/itucedric/L3/S6/rattrap S4/prog/ex_react/stkkk/frontend/src/services/membre.service.js"],"sourcesContent":["import axios from 'axios';\nimport API_BASE_URL from './api.config';\n\nconst API_URL = `${API_BASE_URL}/membres`;\n\n// Récupérer tous les membres\nconst getAllMembres = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer un membre par ID\nconst getMembreById = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Créer un nouveau membre (à partir d'une personne existante)\nconst createMembre = async (membreData) => {\n  try {\n    const response = await axios.post(API_URL, membreData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Mettre à jour un membre\nconst updateMembre = async (id, membreData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, membreData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Supprimer un membre\nconst deleteMembre = async (id) => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer les statistiques d'un membre (activités, présences, paiements)\nconst getMembreStats = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/stats`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Récupérer tous les membres avec leurs statistiques\nconst getAllMembresWithStats = async () => {\n  try {\n    // Récupérer tous les membres\n    const membres = await getAllMembres();\n    \n    // Pour chaque membre, récupérer ses statistiques\n    const membresWithStats = await Promise.all(membres.map(async (membre) => {\n      try {\n        // Récupérer les statistiques du membre\n        const stats = await getMembreStats(membre.id);\n        \n        return {\n          ...membre,\n          nbActivites: stats.nbActivites || 0,\n          nbPresences: stats.nbPresences || 0,\n          montantAPayer: stats.montantAPayer || 0,\n          montantPaye: stats.montantPaye || 0\n        };\n      } catch (error) {\n        // En cas d'erreur, retourner le membre sans statistiques\n        return {\n          ...membre,\n          nbActivites: 0,\n          nbPresences: 0,\n          montantAPayer: 0,\n          montantPaye: 0\n        };\n      }\n    }));\n    \n    return membresWithStats;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst membreService = {\n  getAllMembres,\n  getAllMembresWithStats,\n  getMembreById,\n  getMembreStats,\n  createMembre,\n  updateMembre,\n  deleteMembre\n};\n\nexport default membreService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,cAAc;AAEvC,MAAMC,OAAO,GAAG,GAAGD,YAAY,UAAU;;AAEzC;AACA,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACH,OAAO,CAAC;IACzC,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG,MAAOC,EAAE,IAAK;EAClC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGH,OAAO,IAAIO,EAAE,EAAE,CAAC;IACpD,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMG,YAAY,GAAG,MAAOC,UAAU,IAAK;EACzC,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACY,IAAI,CAACV,OAAO,EAAES,UAAU,CAAC;IACtD,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMM,YAAY,GAAG,MAAAA,CAAOJ,EAAE,EAAEE,UAAU,KAAK;EAC7C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACc,GAAG,CAAC,GAAGZ,OAAO,IAAIO,EAAE,EAAE,EAAEE,UAAU,CAAC;IAChE,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMQ,YAAY,GAAG,MAAON,EAAE,IAAK;EACjC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMJ,KAAK,CAACgB,MAAM,CAAC,GAAGd,OAAO,IAAIO,EAAE,EAAE,CAAC;IACvD,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMU,cAAc,GAAG,MAAOR,EAAE,IAAK;EACnC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGH,OAAO,IAAIO,EAAE,QAAQ,CAAC;IAC1D,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMW,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF;IACA,MAAMC,OAAO,GAAG,MAAMhB,aAAa,CAAC,CAAC;;IAErC;IACA,MAAMiB,gBAAgB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,GAAG,CAAC,MAAOC,MAAM,IAAK;MACvE,IAAI;QACF;QACA,MAAMC,KAAK,GAAG,MAAMR,cAAc,CAACO,MAAM,CAACf,EAAE,CAAC;QAE7C,OAAO;UACL,GAAGe,MAAM;UACTE,WAAW,EAAED,KAAK,CAACC,WAAW,IAAI,CAAC;UACnCC,WAAW,EAAEF,KAAK,CAACE,WAAW,IAAI,CAAC;UACnCC,aAAa,EAAEH,KAAK,CAACG,aAAa,IAAI,CAAC;UACvCC,WAAW,EAAEJ,KAAK,CAACI,WAAW,IAAI;QACpC,CAAC;MACH,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd;QACA,OAAO;UACL,GAAGiB,MAAM;UACTE,WAAW,EAAE,CAAC;UACdC,WAAW,EAAE,CAAC;UACdC,aAAa,EAAE,CAAC;UAChBC,WAAW,EAAE;QACf,CAAC;MACH;IACF,CAAC,CAAC,CAAC;IAEH,OAAOT,gBAAgB;EACzB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMuB,aAAa,GAAG;EACpB3B,aAAa;EACbe,sBAAsB;EACtBV,aAAa;EACbS,cAAc;EACdP,YAAY;EACZG,YAAY;EACZE;AACF,CAAC;AAED,eAAee,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}